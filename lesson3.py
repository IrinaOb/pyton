# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.

def function (a, b):
    try:
        return a/b
    except ZeroDivisionError:
        return 'На ноль делить нельзя'
    except TypeError:
        return "Неверные данные"
print(function(4, 5))
print(function(15, 4))
print(function(44, 12))

# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения,
# город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных
# о пользователе одной строкой.

def description (**kwargs):
    return kwargs
print(description(имя='Ирина', фамилия='Иванова', год_рождения='1988', город_проживания='Москва', email='irina@mail.ru',
телефон='+79109873645'))

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух
# аргументов.

def my_func(el_1, el_2, el_3):
    my_list = [el_1, el_2, el_3]
    my_list.sort(reverse=True)
    return sum(my_list[:2])

print(my_func(10, 20, 5))

# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
# возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
# необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
# более сложная реализация без оператора **, предусматривающая использование цикла.
#
def my_func (x, y):
    return x ** y
print(my_func(2, -2))

my_func_pow = lambda x, y: x**y
def my_func (x: int, y: int) -> float:
    if y > 0:
        return
    elif y == 0:
        return 1
    elif x <=0:
        return
    else:
        x_pow_y = 1
        while y < 0:
            x_pow_y *= 1/x
            y += 1
        return x_pow_y
result = my_func_pow(2, -3)
print(result)
result = my_func(2, -3)
print(result if result else 'Неверные данные')

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма
# чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел
# будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы
# завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к
# полученной ранее сумме и после этого завершить программу.

def sum_calc(input_string):
    input_list = input_string.split()
    my_sum = 0
    for el in input_list:
        if el:
            try:
                if el == 'N':
                    return my_sum, False
                else:
                    my_sum += int(el)
            except ValueError:
                continue
    return my_sum, True

continue_flag = True
result_sum = 0
while continue_flag:
    input_string = input('Введите числа через пробел. Чтобы остановиться, ввдеите N: ')
    current_sum, continue_flag = sum_calc(input_string)
    result_sum += current_sum
    print('Промежуточная сумма: ', result_sum)
print('Конечный результат: ', result_sum)

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной
# первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит
# из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

def int_func(word):
    return  word.capitalize()

input_string = input('Введите строку: ')
result_string_list = []
input_words = input_string.split()
for element in input_words:
    result_string_list.append(int_func(element))

print(" ".join(result_string_list))